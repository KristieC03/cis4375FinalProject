<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Book an Appointment | James Andersen Law Firm</title>

  <!-- Fonts & FullCalendar -->
  <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@300;500;700&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">

  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: 'Josefin Sans', sans-serif;
      background-color: #5b5f7c;
    }

    .page-wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 2rem;
    }

    .container {
      max-width: 1200px;
      width: 100%;
      display: flex;
      gap: 20px;
      padding: 20px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
    }

    h2 {
      color: white;
      text-align: center;
    }

    .calendar-wrapper {
      flex: 1;
      background: white;
      padding: 15px;
      border-radius: 10px;
    }

    #calendar-title {
      text-align: right;
      font-weight: bold;
      font-size: 1.25rem;
      margin-bottom: 10px;
    }

    #calendar {
      border-radius: 10px;
    }

    .form-container {
      flex: 1;
      background: #2E3156;
      padding: 20px;
      border-radius: 10px;
      color: white;
      text-align: center;
    }
    .form-group {
      margin-bottom: 10px;
      text-align: left;
    }

    .form-group label {
      display: block;
      font-weight: bold;
      margin-bottom: 5px;
    }

    .form-group input, .form-group textarea {
      width: 90%;
      padding: 10px;
      border-radius: 5px;
      border: none;
      font-size: 1rem;
    }

    .form-group select {
      width: 90%;
      padding: 12px;  
      border-radius: 5px;
      border: none;
      font-size: 1rem;
      margin-top: 5px; 
    }

    .time-slot {
      background: white;
      color: black;
      padding: 10px;
      border: none;
      margin: 5px;
      border-radius: 5px;
      cursor: pointer;
      width: 30%;
      display: inline-block;
    }

    .time-slot.selected {
      background: gold;
    }

    .submit-btn {
      background: #b39758;
      color: black;
      width: 100%;
      padding: 10px;
      border: none;
      margin-top: 10px;
      border-radius: 5px;
      cursor: pointer;
    }

    .submit-btn:disabled {
      background: #999;
      color: #ccc;
      cursor: not-allowed;
    }

    .fc-day-selected {
      outline: 3px solid #b39758 !important;
    }

    .fc-header-toolbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .fc-toolbar-title {
      display: none !important;
    }

    .no-times-message {
      font-style: italic;
      color: #ccc;
      margin-top: 20px;
    }

    .time-slot.disabled {
      background-color: #ccc;
      cursor: not-allowed;
      opacity: 0.6;
    }

  </style>
</head>
<body>

  <%- include('../../partials/navBar') %>

  <div class="page-wrapper">
    <h2>Schedule an Appointment</h2>

    <div class="container">
      <div class="calendar-wrapper">
        <div id="calendar-title">Loading month...</div>
        <div id="calendar"></div>
      </div>

      <div class="form-container">
        <h3>Select a Time</h3>
        <p id="selected-date-display" style="margin: 10px 0; font-weight: bold;"></p>

        <div id="time-slots">
          <div class="time-slot" data-time="09:00 AM">9:00 AM</div>
          <div class="time-slot" data-time="10:00 AM">10:00 AM</div>
          <div class="time-slot" data-time="11:00 AM">11:00 AM</div>
          <div class="time-slot" data-time="12:00 PM">12:00 PM</div>
          <div class="time-slot" data-time="01:00 PM">1:00 PM</div>
          <div class="time-slot" data-time="02:00 PM">2:00 PM</div>
          <div class="time-slot" data-time="03:00 PM">3:00 PM</div>
          <div class="time-slot" data-time="04:00 PM">4:00 PM</div>
        </div>

        <p id="no-times-msg" class="no-times-message" style="display: none;">No times available for this date.</p>

        <form id="booking-form">
          <div class="form-group">
            <label for="first-name">First Name</label>
            <input type="text" id="first-name" name="firstName" required>
          </div>
          
          <div class="form-group">
            <label for="last-name">Last Name</label>
            <input type="text" id="last-name" name="lastName" required>
          </div>
          
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          
          <div class="form-group">
            <label for="phone">Phone</label>
            <input type="tel" id="phone" name="phone" required>
          </div>

          <div class="form-group">
            <label for="service">Service</label>
            <select id="service" name="serviceType" required>
              <option value="" disabled selected>Please select a service</option>
              <option value="Consultation">Consultation</option>
              <option value="Real Estate">Real Estate</option>
              <option value="Foreclosure Defense">Foreclosure Defense</option>
              <option value="Probate law">Probate law</option>
            </select>
          </div>
          
          
          <div class="form-group">
            <label for="additional-details">Additional Details</label>
            <textarea id="additional-details" name="notes" rows="3" maxlength="1000"></textarea>
          </div>
          <input type="hidden" id="booking-id" name="Booking_ID">
          <input type="hidden" id="client-id" name="Client_ID">
          <input type="hidden" id="selected-date" name="Booking_Date">
          <input type="hidden" id="selected-time" name="Booking_Time">

          <button type="submit" class="submit-btn" id="submit-btn">Confirm Booking</button>
                  
        </form>
      </div>
    </div>
  </div>

  <%- include('../../partials/footer') %>
  
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", async function () {
    const selectedDateInput = document.getElementById("selected-date");
    const selectedDateDisplay = document.getElementById("selected-date-display");
    const selectedTimeInput = document.getElementById("selected-time");
    const timeButtons = document.querySelectorAll(".time-slot");
    const timeSlotsDiv = document.getElementById("time-slots");
    const noTimesMsg = document.getElementById("no-times-msg");
    const submitBtn = document.getElementById("submit-btn");
    const calendarTitle = document.getElementById("calendar-title");

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    let blockedSlots = {};

    // 🔧 Normalize time format to match button data-time (e.g., "1:00 PM", not "01:00 PM")
    function normalizeTime(time) {
      const [hourRaw, minutePart] = time.split(":");
      const hour = parseInt(hourRaw).toString(); // removes leading 0s
      const minute = minutePart.split(" ")[0];
      const meridian = time.includes("AM") ? "AM" : "PM";
      return `${hour}:${minute} ${meridian}`;
    }

    try {
      const res = await fetch("http://localhost:5050/api/approved-bookings");
      const data = await res.json();
      data.forEach(datetime => {
        const date = datetime.split("T")[0]; 
        const time = datetime.split("T")[1];  
        const hour = parseInt(time.split(":")[0]);

        let mappedTime;
        switch(hour) {
          case 14: mappedTime = "9:00 AM"; break;
          case 15: mappedTime = "10:00 AM"; break;
          case 16: mappedTime = "11:00 AM"; break;
          case 17: mappedTime = "12:00 PM"; break;
          case 18: mappedTime = "1:00 PM"; break;
          case 19: mappedTime = "2:00 PM"; break;
          case 20: mappedTime = "3:00 PM"; break;
          case 21: mappedTime = "4:00 PM"; break;
          default: return;
        }

        if (!blockedSlots[date]) blockedSlots[date] = [];
        blockedSlots[date].push(mappedTime);
      });
    } catch (err) {
      console.error("Failed to fetch approved bookings:", err);
      alert("Failed to load available time slots. Please try again later.");
    }

    console.log("Blocked Slots:");
    for (const [date, times] of Object.entries(blockedSlots)) {
      console.log(`${date}: ${times.join(", ")}`);
    }

    const calendar = new FullCalendar.Calendar(document.getElementById("calendar"), {
      initialView: "dayGridMonth",
      selectable: true,
      unselectAuto: false,
      headerToolbar: {
        left: "prev,next today",
        right: ""
      },
      titleFormat: { month: 'long', year: 'numeric' },

      datesSet: function (info) {
        const currentDate = calendar.getDate();
        const month = currentDate.toLocaleString('default', { month: 'long' });
        const year = currentDate.getFullYear();
        calendarTitle.textContent = `${month} ${year}`;
      },

      dateClick: function (info) {
        const clickedDate = new Date(info.dateStr + "T00:00:00");
        const day = clickedDate.getDay();

        document.querySelectorAll('.fc-daygrid-day').forEach(cell => {
          cell.classList.remove('fc-day-selected');
        });

        const parentCell = info.dayEl.closest('.fc-daygrid-day');
        if (parentCell) parentCell.classList.add('fc-day-selected');

        selectedDateInput.value = info.dateStr;
        selectedDateDisplay.textContent = "Selected Date: " + info.dateStr;

        const isPast = clickedDate < today;
        const isWeekend = (day === 0 || day === 6);
        const isToday = clickedDate.getTime() === today.getTime();

        if (isPast || isWeekend) {
          timeSlotsDiv.style.display = 'none';
          noTimesMsg.style.display = 'block';
          submitBtn.disabled = true;
        } else {
          timeSlotsDiv.style.display = 'block';
          noTimesMsg.style.display = 'none';
          submitBtn.disabled = false;

          const blockedTimes = (blockedSlots[info.dateStr] || []).map(normalizeTime);

          timeButtons.forEach(btn => {
            const timeText = normalizeTime(btn.dataset.time);
            btn.style.display = 'inline-block';
            btn.classList.remove('disabled');
            btn.disabled = false;

            if (blockedTimes.includes(timeText)) {
              console.log(`Blocked: ${timeText} on ${info.dateStr}`);
              btn.disabled = true;
              btn.classList.add('disabled');
            } else {
              console.log(`Available: ${timeText} on ${info.dateStr}`);
              btn.disabled = false;
              btn.classList.remove('disabled');
            }
          });

          if (isToday) {
            const now = new Date();
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();

            timeButtons.forEach(btn => {
              const timeText = btn.dataset.time;
              const [hourRaw, meridian] = timeText.split(" ");
              let [hour, minute] = hourRaw.split(":").map(Number);

              if (meridian === "PM" && hour !== 12) hour += 12;
              if (meridian === "AM" && hour === 12) hour = 0;

              if (hour < currentHour || (hour === currentHour && minute <= currentMinute)) {
                btn.style.display = "none";
              }
            });
          }
        }

        selectedTimeInput.value = "";
        timeButtons.forEach(btn => btn.classList.remove("selected"));
      }
    });

    calendar.render();

    timeButtons.forEach(button => {
      button.addEventListener("click", function () {
        if (this.disabled || this.classList.contains("disabled")) {
          return;
        }

        selectedTimeInput.value = this.dataset.time;

        timeButtons.forEach(btn => btn.classList.remove("selected"));
        this.classList.add("selected");

        submitBtn.disabled = !selectedDateInput.value || !selectedTimeInput.value;
      });
    });

    document.getElementById("booking-form").addEventListener("submit", function (e) {
      e.preventDefault();

      const selectedDateVal = selectedDateInput.value;
      const selectedTimeVal = selectedTimeInput.value;

      if (blockedSlots[selectedDateVal]?.map(normalizeTime).includes(normalizeTime(selectedTimeVal))) {
        alert("The selected time has already been booked. Please choose a different time.");
        return;
      }

      if (!selectedDateVal || !selectedTimeVal) {
        alert("Please select both a date and time before confirming your booking.");
        return;
      }

      function convertToISO(dateStr, timeStr) {
        const [time, modifier] = timeStr.split(" ");
        let [hours, minutes] = time.split(":").map(Number);

        if (modifier === "PM" && hours !== 12) hours += 12;
        if (modifier === "AM" && hours === 12) hours = 0;

        // Pad with zero if needed
        const isoHours = String(hours).padStart(2, '0');
        const isoMinutes = String(minutes).padStart(2, '0');

        // Construct ISO-compliant datetime string (local time)
        const localDateTime = new Date(`${dateStr}T${isoHours}:${isoMinutes}:00`);
        return localDateTime.toISOString();
      }

      const isoString = convertToISO(selectedDateVal, selectedTimeVal);

      const bookingData = {
        firstName: document.getElementById("first-name").value,
        lastName: document.getElementById("last-name").value,
        email: document.getElementById("email").value,
        phone: document.getElementById("phone").value,
        serviceType: document.getElementById("service").value,
        notes: document.getElementById("additional-details").value,
        booking_datetime: isoString
      };

      console.log("📤 Sending booking data:", bookingData);

      fetch('http://localhost:5050/api/book-appointment', {
        method: 'POST',
        body: JSON.stringify(bookingData),
        headers: {
          'Content-Type': 'application/json'
        }
      })
        .then(response => response.json())
        .then(data => {
          console.log("✅ Response:", data);
          alert(data.message);
        })
        .catch(error => {
          console.error("❌ Error:", error);
          alert("Failed to submit booking. Please try again later.");
        });
    });
  });
</script>

  </body>
  </html>

