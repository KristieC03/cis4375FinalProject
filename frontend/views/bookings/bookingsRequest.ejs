<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Booking Requests</title>
  <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@300;500;700&display=swap" rel="stylesheet">
  <style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  font-family: 'Josefin Sans', sans-serif;
  background-color: #5b5f7c;
  color: white;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.container {
  flex: 1; /* Ensures the main content grows to fill the available space */
  padding: 30px;
  max-width: 1200px;
  margin: 0 auto;
  overflow-x: auto; /* Allow container to scroll horizontally if needed */
}

h2 {
  margin-bottom: 20px;
}

.search-container {
  margin-bottom: 20px;
}

.search-container input {
  padding: 10px;
  font-size: 16px;
  width: 100%;
  max-width: 300px;
  border-radius: 5px;
  border: none;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 40px;
  background-color: white;
  color: black;
  border-radius: 10px;
  overflow: hidden;
  /* Removed display: block and max-height to make it a normal table */
}

th, td {
  padding: 12px;
  border-bottom: 1px solid #ccc;
  text-align: left;
}

th {
  background-color: #404473;
  color: white;
  cursor: pointer;
  user-select: none;
}

th .arrow {
  margin-left: 5px;
  font-size: 0.8em;
  display: none; /* Arrows hidden initially */
}

tr:nth-child(even) {
  background-color: #f9f9f9;
}

tr:hover {
  background-color: #f1f1f1;
}

.request-buttons {
  text-align: center;
  white-space: nowrap; /* Keep buttons on same line */
}

.request-buttons button {
  width: 80px;
  padding: 6px 0;
  font-size: 13px;
  border-radius: 4px;
  text-align: center;
  border: none;
  cursor: pointer;
  display: inline-block;
}

.approve {
  background-color: #90ee90;
}

.deny {
  background-color: #ff7f7f;
}

.notes-cell {
  max-width: 200px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.clickable-row {
  cursor: pointer;
}

footer {
  margin-top: auto; /* Pushes footer to the bottom of the page */
}

.hidden {
  display: none !important; /* Added class to hide rows dynamically */
}

/* Media query for smaller screens */
@media (max-width: 1024px) {
  .container {
    overflow-x: auto; /* Enable horizontal scrolling for smaller screens */
  }
  
  table {
    width: 100%;
    min-width: 900px; /* Ensure table has minimum width to prevent columns from squishing */
  }
}
#notesModal {
  display: none; /* Hidden by default */
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  max-width: 600px;
  width: 80%;
  z-index: 1000;
  color: black;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  overflow: auto;
}

#modalOverlay {
  display: none; /* Hidden by default */
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 999;
}

#notesModal button {
  margin-top: 10px;
  background-color: #404473;
  color: white;
  padding: 8px 12px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.modal-field {
  margin-bottom: 10px;
}

  </style>
</head>
<body>
  <%- include('../../partials/navBar') %>

  <div class="container">
    <h2>Booking Requests</h2>
    <div class="search-container">
      <input type="text" id="requestSearch" placeholder="Search booking requests..." onkeyup="searchRequests()">
    </div>

    <table id="requestsTable" data-sort-dir="asc">
      <thead>
        <tr>
          <th onclick="sortTable(0)">First Name<span class="arrow">▲</span></th>
          <th onclick="sortTable(1)">Last Name<span class="arrow">▲</span></th>
          <th onclick="sortTable(2)">Date<span class="arrow">▲</span></th>
          <th onclick="sortTable(3)">Time<span class="arrow">▲</span></th>
          <th onclick="sortTable(4)">Email<span class="arrow">▲</span></th>
          <th onclick="sortTable(5)">Phone<span class="arrow">▲</span></th>
          <th onclick="sortTable(6)">Service<span class="arrow">▲</span></th>
          <th onclick="sortTable(7)">Notes<span class="arrow">▲</span></th>
          <th>Request</th>
        </tr>
      </thead>
      <tbody>
        <% bookingRequests.forEach(req => { %>
          <tr class="clickable-row" 
              data-info='<%- JSON.stringify({
                name: `${req.firstName} ${req.lastName}`,
                email: req.email,
                phone: req.phone,
                date: req.date,
                time: `${req.time} ${req.period}`,
                service: req.serviceType,
                notes: req.notes || "—"
              }) %>'>
            <td><%= req.firstName %></td>
            <td><%= req.lastName %></td>
            <td><%= req.date %></td>
            <td><%= req.time %> <%= req.period %></td>
            <td><%= req.email %></td>
            <td class="phone-cell"><%= req.phone %></td>

            <td><%= req.serviceType %></td>
            <td class="notes-cell">
              <%= (req.notes && req.notes.length > 100) ? req.notes.slice(0, 100) + '...' : (req.notes || '—') %>
            </td>
            <td class="request-buttons">
              <button class="approve" data-id="<%= req.id %>">Approve</button>
              <button class="deny" data-id="<%= req.id %>">Deny</button>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
  <div id="modalOverlay" onclick="hideModal()"></div>
  <div id="notesModal">
    <div class="modal-field"><strong>Name:</strong> <span id="modalName"></span></div>
    <div class="modal-field"><strong>Email:</strong> <span id="modalEmail"></span></div>
    <div class="modal-field"><strong>Phone:</strong> <span id="modalPhone"></span></div>
    <div class="modal-field"><strong>Service:</strong> <span id="modalService"></span></div>
    <div class="modal-field"><strong>Date & Time:</strong> <span id="modalDateTime"></span></div>
    <div class="modal-field"><strong>Notes:</strong> <span id="modalNotes"></span></div>
    <button onclick="hideModal()">Close</button>
  </div>
  
  <%- include('../../partials/footer') %>

<script>
    // Sorting function as per W3Schools example
    function sortTable(n) {
      var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.getElementById("requestsTable");
      switching = true;
      dir = "asc"; // Set the sorting direction to ascending

      while (switching) {
        switching = false;
        rows = table.rows;

        for (i = 1; i < (rows.length - 1); i++) {
          shouldSwitch = false;
          x = rows[i].getElementsByTagName("TD")[n];
          y = rows[i].getElementsByTagName("TD")[n];

          if (dir == "asc") {
            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          } else if (dir == "desc") {
            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          }
        }

        if (shouldSwitch) {
          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
          switching = true;
          switchcount++;
        } else {
          if (switchcount == 0 && dir == "asc") {
            dir = "desc";
            switching = true;
          }
        }
      }

      // Toggle arrows
      const arrows = document.querySelectorAll('th .arrow');
      arrows.forEach((arrow, index) => {
        if (index === n) {
          arrow.style.display = 'inline';  // Show arrow when sorting this column
          arrow.textContent = dir === 'asc' ? '▲' : '▼';  // Change the arrow direction
        } else {
          arrow.style.display = 'none'; // Hide arrows on other columns
        }
      });
    }

    // Search function for table rows
    window.searchRequests = function () {
      const input = document.getElementById("requestSearch").value.toLowerCase();
      const table = document.getElementById("requestsTable");
      const rows = table.getElementsByTagName("tr");

      for (let i = 1; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName("td");
        let match = false;
        for (let j = 0; j < cells.length - 1; j++) {  // Exclude the last column (Approve/Deny)
          if (cells[j].textContent.toLowerCase().includes(input)) {
            match = true;
            break;
          }
        }
        
        // Hide rows that do not match the search
        rows[i].style.display = match ? "" : "none";

        // Ensure the "Approve" and "Deny" buttons remain visible
        const buttonColumn = rows[i].getElementsByClassName('request-buttons')[0];
        if (match) {
          buttonColumn.style.display = 'table-cell';  // Ensure buttons are visible
        } else {
          buttonColumn.style.display = 'none';  // Hide buttons with the row if needed
        }
      }
    };

    // Phone number formatting function
    function formatPhoneNumber(phoneNumber) {
      const cleaned = ('' + phoneNumber).replace(/\D/g, ''); // Remove all non-digits
      const match = cleaned.match(/^(\d{3})(\d{3})(\d{4})$/);
      if (match) {
        return `(${match[1]}) ${match[2]}-${match[3]}`;
      }
      return phoneNumber; // Return the original value if it's invalid
    }

    // Apply phone number formatting to the table after page load
    document.addEventListener("DOMContentLoaded", function() {
      const phoneCells = document.querySelectorAll('.phone-cell');
      phoneCells.forEach(cell => {
        const phone = cell.textContent.trim();
        cell.textContent = formatPhoneNumber(phone);
      });
    });

    // Approve booking
    document.querySelectorAll('.approve').forEach(button => {
      button.addEventListener('click', async (event) => {
        event.stopPropagation();
        const bookingId = event.currentTarget.dataset.id;
        try {
          const response = await fetch(`/bookings/approve/${bookingId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          });
          const result = await response.json();
          if (result.success) {
            alert('Booking approved!');
            location.reload();
          } else {
            alert('Error approving booking.');
          }
        } catch (error) {
          console.error('Approve JS error:', error);
          alert('Error approving booking.');
        }
      });
    });

    // Deny booking
    document.querySelectorAll('.deny').forEach(button => {
      button.addEventListener('click', async event => {
        event.stopPropagation();
        const bookingId = event.target.getAttribute('data-id');
        const confirmed = confirm('Are you sure you want to deny this booking? This action cannot be undone.');
        if (!confirmed) return;

        try {
          const response = await fetch(`/bookings/deny/${bookingId}`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' }
          });
          const result = await response.json();
          if (result.success) {
            alert('Booking denied!');
            location.reload();
          } else {
            alert('Error denying booking.');
          }
        } catch (error) {
          console.error(error);
          alert('Error denying booking.');
        }
      });
    });

    // Add event listeners to the rows for displaying the modal on click
    document.querySelectorAll('.clickable-row').forEach(row => {
      row.addEventListener('click', () => {
        const info = JSON.parse(row.getAttribute('data-info'));
        document.getElementById('modalName').textContent = info.name;
        document.getElementById('modalEmail').textContent = info.email;
        document.getElementById('modalPhone').textContent = info.phone;
        document.getElementById('modalService').textContent = info.service;
        document.getElementById('modalDateTime').textContent = `${info.date} at ${info.time}`;
        document.getElementById('modalNotes').textContent = info.notes;

        // Show the modal and overlay
        document.getElementById('modalOverlay').style.display = 'block';
        document.getElementById('notesModal').style.display = 'block';
      });
    });

    function hideModal() {
      document.getElementById('notesModal').style.display = 'none';
      document.getElementById('modalOverlay').style.display = 'none';
    }
</script>

</body>
</html>
